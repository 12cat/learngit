
	audio		# 音频内容
	video		# 视频内容
	source		# 媒体资源
	canvas		# 定义画布功能


语义化元素标签
	header		# 头部导航信息
	footer		# 章节末尾部分
	nav		# 导航链接
	aside		# 页面区域，非正文类内容
	article		# 内容主体，用来显示一块独立的文章内容
	section		# 章节
	hgroup		# 标题元素的组合，常包含h1-h6
	command		# 定义一个命令按钮
	datalist	# 定义一个下拉列表
	details		# 定义一个元素的详细内容
	dialog		# 定义一个对话框
	keygen		# 定义表单里一个声称的键值
	mark		# 定义有标记的文本
	output		# 定义一些输出类型
	progress	# 定义任务的过程

本地存储
	Web SQL Database	# 类似书库
	Web Storage		# 键值对形式存储
		sessionStorage	# 会话期间有效
		localStorage	# 存储在本地
	# 检查是否支持Web Storage
	if(window.localStorage){
		// 浏览器支持localStorage
	}
	if(window.sessionStorage){
		// 浏览器支持sessionStorage
	}
	# localStorage/sessionStorage使用方法
	// 存储
	localStorage.setItem("name","非一般的黑客");
	// 取
	localStorage.getItem("name");
	localStorage.key(1); // 1为第一个下标
	// 删除，根据key
	localStorage.removeItem("name");
	// 删除所有键值对
	localStorage.clear();
	// 存储JSON格式的字符串
        var userData = {name:"Sankyu Name", account:"sankyu", level:1};}
        localStorage.setItem("userData",JSON.stringify(userData));
	// 读取JSON格式内容
	var newUserData = JSON.parse(localStorage.getItem("userData"));
	// 监听storage
	window.addEventListener("storage",function(e){
		console.log(e);
	},true);

离线应用
	# 检查是否支持离线
	if(window.applicationCache){
		// 浏览器支持离线应用
	}
	# 离线应用的用法
	<!DOCTYPE html>
	<html manifest="cache.manifest">
	# Tomcat下的配置
	conf/web.xml文件中配置:mime-mapping加代码
	<mime-mapping>
		<extension>manifest</extension>
		<mime-type>text/cache-manifest</mime-type>
	</mime-mapping>
	# cache.manifest文件
	CACHE MANIFEST
	#缓存文件
	index.html
	test.js
	NETWORK
	#不作缓存文件
	/iamges/
	FALLBACK
	#前面的文件无法获取，则请求转发后面的文件
	offline.html	index.html
	# 检查是否在线
	if(window.navigator.onLine){
		// 当前浏览器online
	} else {
		// 当前浏览器offline
	}
	# 缓存状态
	window.applicationCache.status // 获取缓存状态
	interface ApplicationCache : EventTarget{
		const unsigned short UNCACHED = 0;	// 未缓存
		const unsigned short IDLE = 1;		// 空闲状态
		const unsigned short CHECKING = 2;	// 检查中
		const unsigned short DOWNLOADING = 3;	// 下载中
		const unsigned short UPDATEREADY = 4;	// 更新准备中
		const unsigned short OBSOLETE = 5;	// 过期状态
		readonly attribute unsigned short status;
	}
	# applicationCache对象事件表
	Checking	# 当user agent检查更新时，或第一次下载manifest清单时，它
			  往往会是第一个被触发的事件
	Noupdate	# 当检查到manifest中清单文件不需要更新时，触发该事件
	downloading	# 第一次下载或更新manifest清单文件时，触发该事件
	Progress	# 该事件与downloading类似，但downloading事件只触发一次，
			  progress事件则在清单文件下载过程中周期性触发
	Cached		# 当manifest清单文件下载完毕及成功缓存后，触发该事件
	upadateready	# 此事件的含义表示缓存清单文件已经下载完毕，可通过重新加
			  载页面读取缓存文件活通过方法swapCache()切换到新的缓存
			  文件，常用于本地缓存更新版本后的提示
	Obsolete	# 加入访问manifest缓存文件返回HTTP404错误活401错误（永久
			  消失）时，触发该事件
	Error		# 若要达到触发该事件，需要满足以下几种情况之一
			  已经触发obsolete事件
			  manifest文件没有改变，但缓存文件中存在文件下载失败
			  获取manifest资源文件时发生致命错误
			  当更新本地缓存时，manifest文件再次被更改
	applicationCache.addEventListener('updateready',function(){
		// 资源文件下载中，可以在此部分增加业务功能
	}

