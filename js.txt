面向对象
var student = {
	name: 'Robot',
	height: 1.2,
	run: function(){
		console.log(this.name+' is running...');
	}
};

function createStudent(name){
	// 基于student原型创建一个新对象：
	var s = Object.create(student);
	// 初始化新对象
	s.name = name;
	return s;
}

var xiaoming = createStudent('小明');
xiaoming.run(); // 小明 is running...
xiaoming.__proto__ === student; // true


funciton student(props){
	this.name = props.name || '匿名'; // 默认值为'匿名'
	this.grade = props.grade || 1; // 默认值为1
}

Student.prototype.hello = function(){
	alert('Hello, '+this.name+'!');
};

function createStudent(props){
	return new Student(props || {});
}

var xiaoming = createStudent({name: '小明'});
xiaoming.grade; // 1


原型链继承
function extends(Child, Parent){
	var F = function(){} // 中间空函数
	F.prototype = Parent.prototype; // 空函数F原型指向父函数对象
	Child.prototype = new F(); // 子函数对象原型指向空函数F
	Child.Prototype.constructor = Child; // 修改原型构造函数名称
}

function Student(Props){
	this.name = props.name || 'Unnamed';
}

Student.prototype.hello = function(){
	alert('Hello, '+this.name+'!');
}

function PrimaryStudent(props){
	Student.call(this, props);
	this.grade = props.grade || 1;
}

// 实现原型链继承：
extends(PrimaryStudent, Student);

// 绑定其他方法到PrimaryStudent原型：
PrimaryStudent.prototype.getGrade = function(){
	return this.grade;
};
