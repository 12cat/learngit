doctype html
<!--[if IE 8]><html class="ie8"><![endif]-->
<!--[if IE 9]><html class="ie9"><![endif]-->
<!--[if !IE]><html><![endif]-->
head
	meta(charset="utf-8")
	title #{course.toUpperCase()} study
body
	h2 # 过滤器 #
	// markdown
	:markdown
		Hi, this is **imooc** [link](http://imooc.com)
		// <p>Hi, this is <strong>imooc</strong><a href="http://imooc.com">link</a></p>
	// less
	style
		:less
			body {
				p {
					color: #ccc;
				}
			}
	// coffee
	script
		:coffee
			console.log 'this is coffee!'

	h2 include模板包含
	//-
		包含
		-- head.jade --
		meta(charset='utf-8')
		title extends
		-- style.jade --
		style.
			h3 {
				color: #555;
				font-size: 14px;
			}
		-- title.html --
		<div>
			<h2>12cat</h2>
		</div>
		-- layout.jade --
		doctype html
			html
				head
					include head
					include style
						style.	// *也可以这么加一段
							h2 {
								color: #000;
							}
				body
					block desc
						p desc from layout
					include title.html
					block content

	h2 extends模板继承
	// 声明并调用，调用，调用
	block desc
		p imooc jade study extends
	block desc
	block desc
	//-
		继承
		-- layout.jade --
		doctype html
			html
				head
					meta(charset='utf-8')
					title extends
				body
					block desc
						p desc from layout
					block content
		-- index.jade --
		extends layout

		block content
			block desc
				p desc from index
			h1 继承
		-- 结果 --
		index.jade中的desc覆盖掉了layout.jade中的desc
		<html>
			<head>
				<meta charset='utf-8'>
				<title>extends</title>
			</head>
			<body>
				<p>desc from index</p>
				<p>desc from index</p>
				<h1>继承</h1>
			</body>
		</html>

	h2 mixin
	// 区块的声明和调用
	mixin lesson
		p imooc jade study
	+lesson
	// 传参
	xixin study(name, courses)
		p #{name}
		ul.courses
			each course in courses
				li= course
	+study('tom', ['jade', 'node', 'java'])
	// 嵌套
	mixin group(student)
		h4 #{student.name} study
		+study{student.name, student.courses}
	+group({name: 'tom', courses: ['jade', 'node', 'java']})
	// 内联代码块
	mixin team(slogon)
		h4 #{slogon}
		if block	// p Good job! 被传递进来
			block
		else
			p no team
	+team('slogon')
		p Good job!
	// 传递属性
	mixin attr(name)
		p(class!=attributes.class) #{name}	// !=不再进行第二次转义
	+attr('attr')(class='magic')
	mixin attrs(name)
		p&attributes(attributes) #{name}
	+attrs('attrs')(class='magic2', id='attrsid')
	mixin magic(name, ...items)
		ul(class='#{name}')
			each item in items
				li= item
	+magic('magic', 'node', 'jade', '..')

	h2 判断
	- var isImooc = true
	- var lessons = ['jade', 'node']
	// if else
	if lessons
		if lessons.length > 2
			p more than 2: #{lessons.join(', ')}
		else if lessons.length > 1
			p more than 1: #{lessons.join(', ')}
		else
			p no lesson
	// unless 与if相反，取假值
	unless !isImooc
		p #{lessons.lenght}
	// case
	- var name = 'jade'
	case name
		when 'java'
		when 'node'
			p Hi node!
		when 'jade': p Hi jade!
		default
			p Hi #{name}!

	h2 流程
	// while循环
	- var n = 0
	ul
		while n < 4
			li= n++
	// for循环
	- var imooc = {course: 'jade', level: 'high'}
	- for (var k in imooc)
		p= imooc[k]
	// each循环，- 可以不加
	- var imooc = {course: 'jade', level: 'high'}
	- each value, key in imooc
		p #{key}: #{value}
	// each循环数组
	-var courses = ['node', 'jade', 'express']
	each item in courses
		p= item
	// 嵌套循环 + 三元表达式
	- var sections = [{id: 1, items: ['a', 'b']}, {id: 2, items: ['c', 'd']}]
	dl
		each section in sections > 0 ? sections : [{id: 0, items: ['none']}]
			dt= section.id
			each item in section.items
				dd=item

	h2 转义
	- var data = 'text'		// 声明变量
	- var htmlData = '<script>alert(1);</script><span>script</span>;'
	p #{data}		// 引用变量
	p= data			// 同上
	p #{htmlData}	// 转义字符
	p !{htmlData}	// 不转义成字符，保留标签
	p!= htmlData	// 同上
	p \!{htmlData}	// 转义成!{htmlData}
	p \#{htmlData}	// 转义成#{htmlData}
	input(value=newData)	// newData不存在不赋值
	input(value=#{newData})	// newData不存在赋值undefind

	h2 声明变量和替换数据
	style.
		body {color: ##F60;}
	script.
		var jade = 'jade';

	h2 注释
	// 单行注释 h3.title(id='title', class='title3') imooc
	//- 非缓冲注释 #id.className
	//-
		块注释
		p
			a(href='http://imooc.com', title='imooc jade study', data-uid='100') link

	h2 语法
	section
		div
			ul
			p

	h3 元素属性
	#id.class1(class='class2')
	div#id.class1.class2
		a(href='http://imooc.com', target='_blank') link

	h3 元素的值，文本
	p
		a(href='http://imooc.com', title='imooc jade study', data-uid='100') link
		input(name='course', type='text', value='jade')
		input(name='type', type='checkbox', checked)

	h3 混排文本
	p.
		1. aa
		<strong>11</strong>
		2. bb
		3. cc
		<span>12</span>
		4. dd
	p
		| 1. aa
		strong 11
		| 2. bb
		| 3. cc
		span 12
		| 4. dd
</html>



doctype html
html
	head
		meta
		title jade study
	body
		h2 title

//-
	// 安装
	> npm install jade
	// 模板解析 压缩后的
	> jade index.jade
	// 模板解析 非压缩
	> jade -P index.jade
	// 模板解析监控
	> jade -P -w index.jade
	// 传参数，文档声明变量优先
	> jade index.jade -P -w --obj '{"course": "jade"}'
	> jade index.jade -P -w -O immoc.json
	// 新建一个.json文件，内容为”{}“，然后组件安装到本地
	> npm install jade offee-script less markdown --save
	// 安装插件，过滤器
	> npm install less coffee-script markdown -g



//-
	node js文件中
	var http = require('http');
	var jade = require('jade');

	http.createServer(function(req, res) {
		res.writeHead(200, {
			// 返回文档格式，'Content-Type': 'text/html'
			'Content-Type': 'text/plain'
		});

		// 1. compile
		var fn = jade.compile('div #{course}', {});
		var html = fn({sourse: 'jade'});

		// 2. render
		var html = jade.render('div #{course}', {sourse: 'jade render'});

		// 3. jade.renderFile
		var html = jade.renderFile('index.jade', {sourse: 'jade renderFile'}, pretty: true);

		res.end(html);
	}).listen(1337, '127.0.0.1');

	console.log('Server running at 1337')